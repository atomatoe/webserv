Информация:

1) А.В.Столяров. Программирование: введение в профессию III. Системы и сети.
6 глава, страница 148.
http://www.stolyarov.info/books/pdf/progintro_vol3.pdf

2) https://github.com/splunk/pion/tree/develop/src   не смотрел пока

3) https://code-live.ru/post/cpp-http-server-over-sockets/#http   - о http

4) https://habr.com/ru/post/501498/ - еще не разбирал

Новые функции:

1) stat, fstat, lstat - считывает статус файла  
- https://www.opennet.ru/cgi-bin/opennet/man.cgi?topic=lstat
- stat возвращает информацию о файле file_name и заполняет буфер buf. lstat идентична stat, но в случае символьных сылок она возвращает информацию
    о самой ссылке, а не о файле, на который она указывает. 
- fstat идентична stat, только возвращается информация об открытом файле, на который указывает filedes (возвращаемый open(2)), а не о file_name.

2) lseek - Изменяет текущую позицию чтения/записи в файле, заданном дескриптором fd.
http://www.codenet.ru/progr/cpp/sprd/lseek.php

3) strptime - конвертирует строчное представление времени в представление времени структуры tm  
https://www.opennet.ru/man.shtml?topic=strptime&category=3&russian=0

4) Функция strftime () преобразует локальное (местное) время, представленное в виде структуры типа struct tm, на которую указывает аргумент m_time, в текстовую строку.
http://all-ht.ru/inf/prog/c/func/strftime.html

webserv funс:

5) Функции select ждет изменения статуса нескольких файловых описателей.
https://www.opennet.ru/man.shtml?topic=select&category=2&russian=0

6) socket - используется для создания сокета.
https://www.opennet.ru/docs/RUS/linux_base/node245.html

7) accept - используется сервером для принятия связи на сокет.
https://www.opennet.ru/docs/RUS/linux_base/node248.html

8) listen - Функция listen используется сервером, чтобы информировать ОС, что он ожидает ("слушает") запросы связи на данном сокете. 
https://www.opennet.ru/docs/RUS/linux_base/node247.html

9) send - служит для записи данных в сокет.
https://www.opennet.ru/docs/RUS/linux_base/node250.html

10) recv - служит для чтения данных из сокета.
https://www.opennet.ru/docs/RUS/linux_base/node251.html

11) bind - Эта функция используется сервером для присваивания сокету имени.
https://www.opennet.ru/docs/RUS/linux_base/node246.html

12) connect - используется процессом-клиентом для установления связи с сервером.
https://www.opennet.ru/docs/RUS/linux_base/node249.html

13) inet_addr - преобразует обычный вид IP-адреса cp (из номеров и точек) в двоичный код в сетевом порядке расположения байтов.
https://www.opennet.ru/man.shtml?topic=inet_addr&category=3&russian=0

14) setsockopt - получить или установить флаги на сокете 
https://www.opennet.ru/man.shtml?topic=setsockopt&category=2&russian=0

15)  getsockname - возвращает либо локальный (функция getsockname), либо удаленный (функция getpeername) адрес протокола, связанный с сокетом.
https://it.wikireading.ru/7021

16) Функция fcntl() позволяет программе поставить на файл блокировку чтения иди записи.
https://it.wikireading.ru/34319

Какие заголовки надо будет реализовать:
все заголовки тут: https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8

Что такое заголовок? https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8
https://code.tutsplus.com/ru/tutorials/http-headers-for-dummies--net-8039

1) Accept-Charset
Заголовок Accept-Charset запроса HTTP сообщает какую кодировку клиент может понять.
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Accept-Charset

2) Accept-Language
Запрос Accept-Language сообщает серверу, какие языки клиент понимает и какая локаль предпочтительнее
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Accept-Language

3) Allow  заголовок ответа?! ??

4) Заголовок HTTP запроса Authorization включает в себя данные пользователя для проверки подлинности пользовательского агента с сервером
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Authorization

5) Content-Language - отвечает на Accept-Launge: сервер выбирает один из предложенных вариантов, использует его и информирует клиента о своем выборе при помощи заголовка ответа Content-Language.
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Accept-Language

6) Content-Length указывает размер отправленного получателю тела объекта в байтах.
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Content-Length

7) Content-Location - Заголовок указывает альтернативное расположение для возвращаемых данных
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Location

8) Content-Type - В ответах сервера заголовок Content-Type сообщает клиенту, какой будет тип передаваемого контента. 
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Content-Type

9) Date - Заголовок HTTP вообще содержит дату и время , в которое было инициировано сообщение.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date

10) Заголовок Host содержит имя домена, для которого предназначен запрос и, опционально, номер порта.
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Host

11) Last-Modified в ответе HTTP содержит дату и время, в которую, по мнению удаленного сервера, запрашиваемый ресурс был изменен.
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Last-Modified

12) Location -  URI по которому клиенту следует перейти или URI созданного ресурса.
https://ru.wikipedia.org/wiki/HTTP_location

13) Заголовок запроса Referer содержит URL исходной страницы, с которой был осуществлен переход на текущую страницу.
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Referer

14) Retry-After - заголовок HTTP ответа показывает, как долго клиент должен подождать перед последующим запросом
https://developer.mozilla.org/ru/docs/Web/HTTP/%D0%97%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%B8/Retry-After

15) Server - Заголовка описывает программное обеспечение , используемое сервером происхождения , который обрабатывается запрос - то есть, сервер генерируется ответ.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server

16) Transfer-Encoding - Заголовок определяет форму кодирования используется для передачи безопасно тела полезной нагрузки для пользователя.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding

17) User-Agent - Указывает программное обеспечение клиента и его характеристики. Аналогичным ему является Server для серверов и Via для прокси.
https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%B7%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%BE%D0%B2_HTTP#User-Agent

18) WWW-Authenticate - Заголовок ответа HTTP определяет метод аутентификации, который следует использовать для получения доступа к ресурсу.
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate